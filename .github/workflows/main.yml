jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get Green EC2 Instance ID
        id: get_green_id
        run: |
          GREEN_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=GreenInstance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "GREEN_INSTANCE_ID=$GREEN_INSTANCE_ID" >> $GITHUB_ENV

      - name: Get Blue EC2 Instance ID
        id: get_blue_id
        run: |
          BLUE_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=BlueInstance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "BLUE_INSTANCE_ID=$BLUE_INSTANCE_ID" >> $GITHUB_ENV

      - name: Deploy to Green Environment (EC2)
        run: |
          aws deploy create-deployment \
            --application-name MovieApp \
            --deployment-group-name greenMovieBackend \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=backend.zip,bundleType=zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Health Check on Green Environment
        run: |
          GREEN_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=GreenInstance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          curl -f http://$GREEN_IP/health || exit 1

      - name: Terminate Blue Environment
        run: |
          aws ec2 terminate-instances --instance-ids $BLUE_INSTANCE_ID
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
